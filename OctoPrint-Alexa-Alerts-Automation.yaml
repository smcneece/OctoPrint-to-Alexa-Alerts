alias: Notify via Alexa - OctoPrint Job Status v11
description: >
  Alexa announcements and persistent notifications for OctoPrint job status.
  Fully customizable and supports multiple printers + multiple Alexa devices.

# ========================================================
# 🔧 EDITABLE SETTINGS BELOW — MAKE IT YOUR OWN
# ========================================================

variables:
  alexa_notify_services:
    - notify.alexa_media_basemenmancave
    - notify.alexa_media_echoclockdot
    - notify.alexa_media_basement_bathroom_echo_flex

  enable_persistent_notifications: true
#24 hour time
  alexa_start_hour: 9
  alexa_start_minute: 0
  alexa_end_hour: 22
  alexa_end_minute: 0

  printer_names:
    sensor.chiron_right_current_state: Chiron Right
    sensor.chiron_left_current_state: Chiron Left

# ========================================================
# ⚠️ WARNING: Editing below this line is at your own risk!
# ========================================================

trigger:
  - platform: state
    entity_id:
      - sensor.chiron_right_current_state
      - sensor.chiron_left_current_state

mode: queued
max: 10

action:
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ trigger.to_state.state == 'Printing' and trigger.from_state.state != 'Paused' }}
        sequence:
          - variables:
              notification_message: "Print job started on {{ printer_names[trigger.entity_id] if trigger.entity_id in printer_names else trigger.entity_id }}."
      - conditions:
          - condition: template
            value_template: >
              {{ trigger.from_state.state == 'Paused' and trigger.to_state.state == 'Printing' }}
        sequence:
          - variables:
              notification_message: "Print job resumed on {{ printer_names[trigger.entity_id] if trigger.entity_id in printer_names else trigger.entity_id }}."
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'Paused' }}"
        sequence:
          - variables:
              notification_message: "Print job paused on {{ printer_names[trigger.entity_id] if trigger.entity_id in printer_names else trigger.entity_id }}."
      - conditions:
          - condition: template
            value_template: >
              {{ trigger.from_state.state == 'Printing' and trigger.to_state.state == 'Operational' }}
        sequence:
          - variables:
              notification_message: "Print job completed successfully on {{ printer_names[trigger.entity_id] if trigger.entity_id in printer_names else trigger.entity_id }}."
      - conditions:
          - condition: template
            value_template: >
              {{ trigger.from_state.state == 'Printing' and trigger.to_state.state == 'Error' }}
        sequence:
          - variables:
              notification_message: "Print job failed on {{ printer_names[trigger.entity_id] if trigger.entity_id in printer_names else trigger.entity_id }}! State is now Error."

  # Alexa time check
  - variables:
      now_hour: "{{ now().hour }}"
      now_minute: "{{ now().minute }}"

  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ (now_hour > alexa_start_hour or (now_hour == alexa_start_hour and now_minute >= alexa_start_minute)) and
                 (now_hour < alexa_end_hour or (now_hour == alexa_end_hour and now_minute < alexa_end_minute)) }}
        sequence:
          - repeat:
              for_each: "{{ alexa_notify_services }}"
              sequence:
                - service: "{{ repeat.item }}"
                  data:
                    message: "{{ notification_message }}"
                    data:
                      type: announce

  # Persistent notification always (if enabled)
  - condition: template
    value_template: "{{ enable_persistent_notifications }}"
  - service: persistent_notification.create
    data:
      title: "3D Printer Notification: {{ printer_names[trigger.entity_id] if trigger.entity_id in printer_names else trigger.entity_id }}"
      message: "{{ notification_message }}"
